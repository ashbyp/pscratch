import math

question = "https://adventofcode.com/2019/day/10"
input_data = "https://adventofcode.com/2019/day/10/input"

pdata = """.#....#.###.........#..##.###.#.....##...
...........##.......#.#...#...#..#....#..
...#....##..##.......#..........###..#...
....#....####......#..#.#........#.......
...............##..#....#...##..#...#..#.
..#....#....#..#.....#.#......#..#...#...
.....#.#....#.#...##.........#...#.......
#...##.#.#...#.......#....#........#.....
....##........#....#..........#.......#..
..##..........##.....#....#.........#....
...#..##......#..#.#.#...#...............
..#.##.........#...#.#.....#........#....
#.#.#.#......#.#...##...#.........##....#
.#....#..#.....#.#......##.##...#.......#
..#..##.....#..#.........#...##.....#..#.
##.#...#.#.#.#.#.#.........#..#...#.##...
.#.....#......##..#.#..#....#....#####...
........#...##...#.....#.......#....#.#.#
#......#..#..#.#.#....##..#......###.....
............#..#.#.#....#.....##..#......
...#.#.....#..#.......#..#.#............#
.#.#.....#..##.....#..#..............#...
.#.#....##.....#......##..#...#......#...
.......#..........#.###....#.#...##.#....
.....##.#..#.....#.#.#......#...##..#.#..
.#....#...#.#.#.......##.#.........#.#...
##.........#............#.#......#....#..
.#......#.............#.#......#.........
.......#...##........#...##......#....#..
#..#.....#.#...##.#.#......##...#.#..#...
#....##...#.#........#..........##.......
..#.#.....#.....###.#..#.........#......#
......##.#...#.#..#..#.##..............#.
.......##.#..#.#.............#..#.#......
...#....##.##..#..#..#.....#...##.#......
#....#..#.#....#...###...#.#.......#.....
.#..#...#......##.#..#..#........#....#..
..#.##.#...#......###.....#.#........##..
#.##.###.........#...##.....#..#....#.#..
..........#...#..##..#..##....#.........#
..#..#....###..........##..#...#...#..#.."""

tdata1 = """.#..#
.....
#####
....#
...##"""

tdata2="""......#.#.
#..#.#....
..#######.
.#.#.###..
.#..#.....
..#....#.#
#..#....#.
.##.#..###
##...#..#.
.#....####"""

tdata3="""#.#...#.#.
.###....#.
.#....#...
##.#.#.#.#
....#.#.#.
.##..###.#
..#...##..
..##....##
......#...
.####.###."""

tdatabig=""".#..##.###...#######
##.############..##.
.#.######.########.#
.###.#######.####.#.
#####.##.#.##.###.##
..#####..#.#########
####################
#.####....###.#.#.##
##.#################
#####.##.###..####..
..######..##.#######
####.##.####...##..#
.#####..#.######.###
##...#.##########...
#.##########.#######
.####.#.###.###.#.##
....##.##.###..#####
.#.#.###########.###
#.#.#.#####.####.###
###.##.####.##.#..##"""

tdata="""##.
.##"""

tdata5=""".#..#..###
####.###.#
....###.#.
..###.##.#
##.##.#.#.
....###..#
..#.#..#.#
#..#.#.###
.##...##.#
.....#.#.."""

def part2(data: str, debug: bool = False):
    pass


def find_visible(row, col, grid):

    if grid[row][col] == '#':
        # print('try', row, col)
        pass
    else:
        # print('skip', row, col)
        return 0

    class arse:
        def __init__(self):
            self.s = set()
            self.l = list()
            self.b = list()

        def add(self, v, x, y):
            self.s.add(v)
            self.l.append(v)
            self.b.append((v, x, y))

        def len(self): return len(self.s)

        def __str__(self):
            # return str(self.s) + ' ' + str(self.l)
            return str(self.b)

    grads = arse()

    for r in range(len(grid)):
        for c in range(len(grid[0])):
            if grid[r][c] == '#':
                if not(r == row and c == col):
                    if r == row:
                        if c > col:
                            grads.add(999999, r, c)
                        else:
                            grads.add(99999999998, r, c)
                    elif c == col:
                        if r > row:
                            grads.add(99999999, r, c)
                        else:
                            grads.add(99999997, r, c)
                    else:
                        m = (row - r) / (col - c)
                        n = math.atan(m)
                        if row > r and col > c:
                            m *= 6365
                        elif row < r and col < c:
                            m *= 3846
                        elif row > r and col < c:
                            m *= 2654
                        else:
                            m *= 8376

                        grads.add(m, r, c)
    print(f'({row},{col} len={grads.len()} - {grads.s} {grads.l}')
    return grads.len()


def part1(data: str, debug: bool = False):
    m_count = 0
    p = None
    grid = list(map(list, data.splitlines()))

    # from math_utils.matrix import transpose

    # grid = transpose(grid)


    for r in grid:
        print(r)

    for row in range(len(grid)):
        for col in range(len(grid[0])):
            count = find_visible(row, col, grid)
            if count >= m_count:
                m_count = max(m_count, count)
                p = (row, col)

    print(m_count, p)


def main():
    import timeit

    def run(msg, data, fn, debug):
        if data:
            print(f'*** {msg:13} ---------------')
            start = timeit.default_timer()
            fn(data, debug)
            elapsed_ms = (timeit.default_timer() - start) * 1000
            print(f'Time {elapsed_ms:.10f} ms ------------')

    run("Part 1 test", tdata, part1, True)
    run("Part 1 puzzle", pdata, part1, False)
    run("Part 2 test", tdata, part2, True)
    run("Part 2 puzzle", pdata, part2, False)


if __name__ == '__main__':
    main()
